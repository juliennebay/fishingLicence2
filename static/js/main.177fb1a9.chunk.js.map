{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","addresses","setAddresses","length","fetch","then","response","json","addressArray","searchKeyword","setSearchKeyword","className","id","type","value","onChange","event","target","placeholder","filter","address","Object","values","map","obj","content","some","toLowerCase","includes","i","key","_city","business_name","href","street_address","postal_code","issuer_type","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"oQA4FeA,MAzFf,WAAgB,IAAD,EACqBC,mBAAS,IAD9B,mBACNC,EADM,KACKC,EADL,KAaY,IAArBD,EAAUE,QATZC,MAAM,4DAA4DC,MAChE,SAAAC,GACEA,EAASC,OAAOF,MAAK,SAAAG,GACnBN,EAAaM,SAPR,MAkB6BR,mBAAS,IAlBtC,mBAkBNS,EAlBM,KAkBSC,EAlBT,KAwBb,OACE,yBAAKC,UAAU,OACb,yBAAKA,UAAU,WACb,iFACA,uIAIA,yBAAKA,UAAU,cACb,2BACEC,GAAG,aACHC,KAAK,OACLC,MAAOL,EACPM,SAjBkB,SAAAC,GAC1BN,EAAiBM,EAAMC,OAAOH,QAiBtBI,YAAY,4BAIlB,+BACE,+BACE,4BACE,oCACA,6CACA,sDACA,wBAAIP,UAAU,eAAd,eACA,6CAGJ,+BACGV,EACEkB,QACC,SAAAC,GAAO,OACoB,IAAzBX,EAAcN,QACdkB,OAAOC,OAAOF,GACXG,KAAI,SAAAC,GAAG,OAAIA,EAAIC,WACfC,MAAK,SAAAD,GAAO,OACXA,EAAQE,cAAcC,SAASnB,EAAckB,qBAGpDJ,KAAI,SAACH,EAASS,GACb,OACE,wBAAIC,IAAKD,GACP,4BAAKT,EAAQW,MAAMN,SACnB,4BAAKL,EAAQY,cAAcP,SAC3B,4BACE,uBACER,OAAO,SACPgB,KAAI,yCAAoCb,EAAQc,eAAeT,QAA3D,YAAsEL,EAAQe,YAAYV,UAE7FL,EAAQc,eAAeT,UAG5B,wBAAId,UAAU,eAAeS,EAAQe,YAAYV,SACjD,4BAAKL,EAAQgB,YAAYX,iBCpEvBY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5C,MAAK,SAAA6C,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.177fb1a9.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./App.css\";\n\nfunction App() {\n  const [addresses, setAddresses] = useState([]);\n\n  function fetchData() {\n    fetch(\"https://api.ontario.ca/api/data/64029?count=0&download=1\").then(\n      response => {\n        response.json().then(addressArray => {\n          setAddresses(addressArray);\n        });\n      }\n    );\n  }\n\n  if (addresses.length === 0) {\n    fetchData();\n  }\n\n  //search places by any keyword\n  const [searchKeyword, setSearchKeyword] = useState(\"\");\n\n  const updateSearchKeyword = event => {\n    setSearchKeyword(event.target.value);\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"top-bar\">\n        <h1>Ontario hunting and fishing licence issuers: 2020</h1>\n        <h3>\n          Find a nearby location that sells hunting and fishing licences, tags\n          and related products and services.\n        </h3>\n        <div className=\"search-box\">\n          <input\n            id=\"name-input\"\n            type=\"text\"\n            value={searchKeyword}\n            onChange={updateSearchKeyword}\n            placeholder=\"search by any keyword\"\n          />\n        </div>\n      </div>\n      <table>\n        <thead>\n          <tr>\n            <th>City</th>\n            <th>Business Name</th>\n            <th>Address (click to map)</th>\n            <th className=\"postal-code\">Postal Code</th>\n            <th>Issuer Type</th>\n          </tr>\n        </thead>\n        <tbody>\n          {addresses\n            .filter(\n              address =>\n                searchKeyword.length === 0 ||\n                Object.values(address)\n                  .map(obj => obj.content)\n                  .some(content =>\n                    content.toLowerCase().includes(searchKeyword.toLowerCase())\n                  )\n            )\n            .map((address, i) => {\n              return (\n                <tr key={i}>\n                  <td>{address._city.content}</td>\n                  <td>{address.business_name.content}</td>\n                  <td>\n                    <a\n                      target=\"_blank\"\n                      href={`https://google.com/maps/search/${address.street_address.content} ${address.postal_code.content}`}\n                    >\n                      {address.street_address.content}\n                    </a>\n                  </td>\n                  <td className=\"postal-code\">{address.postal_code.content}</td>\n                  <td>{address.issuer_type.content}</td>\n                </tr>\n              );\n            })}\n        </tbody>\n      </table>\n    </div>\n  );\n\n  //\"https://google.com/maps/search/\" + address + \" \" + postalCode\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}